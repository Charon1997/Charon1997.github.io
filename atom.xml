<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Charon的小屋</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-10-03T07:17:08.192Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Charon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android 创建UI模板和自定义控件</title>
    <link href="http://yoursite.com/2017/10/03/Android-%E5%88%9B%E5%BB%BAUI%E6%A8%A1%E6%9D%BF%E5%92%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    <id>http://yoursite.com/2017/10/03/Android-创建UI模板和自定义控件/</id>
    <published>2017-10-03T07:16:32.000Z</published>
    <updated>2017-10-03T07:17:08.192Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、新建属性"><a href="#一、新建属性" class="headerlink" title="一、新建属性"></a>一、新建属性</h1><p>在新建的module中的values文件夹下新建atts.xml</p><p>声明<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;declare-styleable name=&quot;Topbar&quot;&gt;</div><div class="line">   &lt;attr name=&quot;title&quot; format=&quot;string&quot;/&gt;</div><div class="line">   //此处省略10000字</div><div class="line">&lt;/declare-styleable&gt;</div></pre></td></tr></table></figure></p><h1 id="二、实现自己的View"><a href="#二、实现自己的View" class="headerlink" title="二、实现自己的View"></a>二、实现自己的View</h1><p>可以继承RelativeLayout</p><p>创建构造方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">private String title;</div><div class="line">private TextView mTvTitle;</div><div class="line"></div><div class="line">private LayoutParams titleParams;</div><div class="line"></div><div class="line"></div><div class="line">public Topbar(Context context,AttributeSet attrs)&#123;</div><div class="line">  super(context,attrs);</div><div class="line">  //用系统提供的API，将各种view属性设置进去</div><div class="line">  TypedArray ta = context.obtainStyledAttributes(attrs,R.styleable.Topbar);</div><div class="line"></div><div class="line">  //通过下划线连接</div><div class="line">  title = ta.getString(R.styleable.Topbar_title);</div><div class="line"></div><div class="line">  //为了避免浪费资源，要回收ta</div><div class="line">  ta.recycle();</div><div class="line"></div><div class="line">  mTvTitle = new TextView();</div><div class="line">  //将标题文字设置</div><div class="line">  mTvTitle.setText(title);</div><div class="line">  mTvTitle.setGravity(Gravity.CENTER);</div><div class="line"></div><div class="line">  titleParams = new LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,ViewGroup.LayoutParams.WRAP_CONTENT);</div><div class="line">  </div><div class="line">  //加入一些规则，这里的TRUE为常量</div><div class="line">  titleParams.addRule(RelativeLayout.CENTER_IN_PARENT,TRUE);</div><div class="line">  addView(mTvTitle,titleParams );</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="三、使用自定义View"><a href="#三、使用自定义View" class="headerlink" title="三、使用自定义View"></a>三、使用自定义View</h1><h2 id="（一）用完整类名引用控件"><a href="#（一）用完整类名引用控件" class="headerlink" title="（一）用完整类名引用控件"></a>（一）用完整类名引用控件</h2><p>例如TextView，用类名引入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;com.charon.Topbar</div><div class="line">&lt;/com.charon.Topbar&gt;</div></pre></td></tr></table></figure></p><h2 id="（二）引入相应的命名空间"><a href="#（二）引入相应的命名空间" class="headerlink" title="（二）引入相应的命名空间"></a>（二）引入相应的命名空间</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xmlns:topbar=&quot;http://schemas.android.com/apk/res-auto&quot;</div></pre></td></tr></table></figure><p>即可用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">topbar:title=&quot;这是一个标题&quot;</div></pre></td></tr></table></figure></p><h1 id="四、实现view的点击事件"><a href="#四、实现view的点击事件" class="headerlink" title="四、实现view的点击事件"></a>四、实现view的点击事件</h1><h2 id="（一）定义接口"><a href="#（一）定义接口" class="headerlink" title="（一）定义接口"></a>（一）定义接口</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public interface topbarClickListener&#123;</div><div class="line">  public void leftClick();</div><div class="line">  public void rightClick();  </div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="（二）暴露方法"><a href="#（二）暴露方法" class="headerlink" title="（二）暴露方法"></a>（二）暴露方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public void setOnTopbarClickListener(topbarClickListener listener)&#123;</div><div class="line">  if(listener == null)</div><div class="line">  this.listener = listener;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="（三）设置点击事件"><a href="#（三）设置点击事件" class="headerlink" title="（三）设置点击事件"></a>（三）设置点击事件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 设置相应的点击事件</div><div class="line">leftButton.setOnClickListener(new OnClickListener())&#123;</div><div class="line">  @Override</div><div class="line">  public void onClick(View v)&#123;</div><div class="line">    listener.leftClick();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="（四）调用者的引用"><a href="#（四）调用者的引用" class="headerlink" title="（四）调用者的引用"></a>（四）调用者的引用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//在Activity中，设置相应的方法</div><div class="line">topbar.setOnTopbarClickListener(new Topbar.topbarClickListener())&#123;</div><div class="line">  @Override</div><div class="line">  public void leftClick()&#123;</div><div class="line">    //dosomething</div><div class="line">  &#125;</div><div class="line">  @Override</div><div class="line">  public void rightClick()&#123;</div><div class="line">    //dosomething</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="五、更多"><a href="#五、更多" class="headerlink" title="五、更多"></a>五、更多</h1><p>在Topbar中可以设置很多自定义属性<br>比如是否可见<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public void setLeftIsVisible(boolean flag)&#123;</div><div class="line">  if(flag)&#123;</div><div class="line">    leftButton.setVisibility(View.VISIBLE);</div><div class="line">  &#125; else &#123;</div><div class="line">    leftButton.setVisibility(View.GONE);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>则可以直接调用这属性。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">topbar.setLeftIsVisible(false);</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、新建属性&quot;&gt;&lt;a href=&quot;#一、新建属性&quot; class=&quot;headerlink&quot; title=&quot;一、新建属性&quot;&gt;&lt;/a&gt;一、新建属性&lt;/h1&gt;&lt;p&gt;在新建的module中的values文件夹下新建atts.xml&lt;/p&gt;
&lt;p&gt;声明&lt;br&gt;&lt;figure 
      
    
    </summary>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2017/10/02/Fragment%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2017/10/02/Fragment详解/</id>
    <published>2017-10-02T12:21:24.945Z</published>
    <updated>2017-10-02T12:27:38.398Z</updated>
    
    <content type="html"><![CDATA[<p>一般手机开发，用到fragment的情况很多，主要有以下两种用法</p><blockquote><ol><li>平板与手机的运用</li><li>抽出相应模块复用</li></ol></blockquote><h1 id="一、Fragment的使用"><a href="#一、Fragment的使用" class="headerlink" title="一、Fragment的使用"></a>一、Fragment的使用</h1><h2 id="（一）静态使用"><a href="#（一）静态使用" class="headerlink" title="（一）静态使用"></a>（一）静态使用</h2><h3 id="1-大致流程"><a href="#1-大致流程" class="headerlink" title="1.大致流程"></a>1.大致流程</h3><ol><li>继承fragment（app包下的），重写onCreateView()回调方法 设置Fragment的布局</li><li>在Activity中声明Fragment 使用方式与view相同</li></ol><p>###2.创建和使用的步骤</p><ol><li>创建子类继承fragment</li><li>重写onCreateView()方法，该方法主要定义fragment的布局，以view对象的形式返回fragment的视图</li><li>将fragment引入到Activity中</li></ol><p>###3.要点</p><ol><li>LayoutInflater 布局填充器或者加载器， 将xml文件转换成view对象<br>方法：inflate(表示加载的xml文件资源，是否加入根布局)</li><li>直接在xml（activity的xml）中用fragment标签，用name指定自定义的fragment（类名）</li></ol><h2 id="（二）动态使用后"><a href="#（二）动态使用后" class="headerlink" title="（二）动态使用后"></a>（二）动态使用后</h2><h3 id="1-大致流程-1"><a href="#1-大致流程-1" class="headerlink" title="1.大致流程"></a>1.大致流程</h3><ol><li>继承fragment（app包下的），重写onCreateView()回调方法 设置Fragment的布局</li><li>在Activity中创建Fragment的管理器对象</li><li>获取Fragment的事务对象并开启</li><li>调用事务的动态方法，动态地添加、删除、替换fragment</li><li>提交事务</li></ol><p>###2.创建和使用的步骤</p><ol><li>创建子类继承fragment</li><li>重写onCreateView()方法，该方法主要定义fragment的布局，以view对象的形式返回fragment的视图</li><li>在Activity中创建FragmentManager</li></ol><h3 id="3-要点"><a href="#3-要点" class="headerlink" title="3.要点"></a>3.要点</h3><ol><li>事务：是一组不可再分割的操作集合。如：10行代码为1个事务，如果第9行报错，则前8行代码也不执行。</li></ol><h3 id="4-代码"><a href="#4-代码" class="headerlink" title="4.代码"></a>4.代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">//在Activity中创建Fragment的管理器对象</div><div class="line">FragmentManager manager = getFragmentManager();</div><div class="line">    </div><div class="line">//获取Fragment的事务对象并开启</div><div class="line">FragmentTransaction transaction = manager.beginTransaction();</div><div class="line"></div><div class="line">//调用事务的动态方法，动态地添加、删除、替换fragment</div><div class="line">//将TitleFragmnet动态添加到title_layout的位置（创建的为linearLayout这种布局）</div><div class="line">transaction.add(R.id.title_layout,new TitleFragmnet());</div><div class="line"></div><div class="line">//transaction.remove(arg0);  remove(需要移出的fragment对象);</div><div class="line">//transaction.replace(arg0,arg1)  replace(表示替换fragment位置的资源id,替换fragment对象)  </div><div class="line"></div><div class="line">//提交事务</div><div class="line">transaction.commit();</div></pre></td></tr></table></figure><h2 id="（三）v4包下的使用"><a href="#（三）v4包下的使用" class="headerlink" title="（三）v4包下的使用"></a>（三）v4包下的使用</h2><h3 id="1-大致流程-2"><a href="#1-大致流程-2" class="headerlink" title="1.大致流程"></a>1.大致流程</h3><ol><li>继承fragment（v4下的），重写onCreateView()回调方法 设置Fragment的布局</li><li>在Activity（继承FragmentActivity）中创建Fragment的管理器对象(v4下)</li><li>获取Fragment的事务对象(v4下)并开启</li><li>调用事务的动态方法，动态地添加、删除、替换fragment</li><li>提交事务</li></ol><p>###2.创建和使用的步骤</p><ol><li>创建子类继承fragment</li><li>重写onCreateView()方法，该方法主要定义fragment的布局，以view对象的形式返回fragment的视图</li><li>在Activity（继承FragmentActivity）中创建FragmentManager</li></ol><h3 id="3-要点-1"><a href="#3-要点-1" class="headerlink" title="3.要点"></a>3.要点</h3><ol><li>导包的统一性。</li></ol><h1 id="二、Fragment的生命周期"><a href="#二、Fragment的生命周期" class="headerlink" title="二、Fragment的生命周期"></a>二、Fragment的生命周期</h1><h2 id="（一）三个主要方法"><a href="#（一）三个主要方法" class="headerlink" title="（一）三个主要方法"></a>（一）三个主要方法</h2><blockquote><ol><li>onCreate（）创建Fragment时调用</li><li>onCreateView()  第一次绘制Fragment时调用，返回view对象</li><li>onPause()用户离开Fragment时调用</li></ol></blockquote><h2 id="（二）Activity的生命周期"><a href="#（二）Activity的生命周期" class="headerlink" title="（二）Activity的生命周期"></a>（二）Activity的生命周期</h2><blockquote><ol><li>onCreate() 创建时</li><li>onStart() 用户能看到时</li><li>onResume() 获取焦点时</li><li>onPause() 失去焦点时</li><li>onStop() 被完全遮挡</li><li>onRestart() 被重新打开</li><li>onDestroy() 直接返回</li></ol></blockquote><h2 id="（二）Fragment的生命周期"><a href="#（二）Fragment的生命周期" class="headerlink" title="（二）Fragment的生命周期"></a>（二）Fragment的生命周期</h2><blockquote><ol><li>onAttach() activity和fragment产生关联时回调的方法</li><li>onCreate() fragment第一次被创建</li><li>onCreateView() fragment第一次绘制界面</li><li>onActivityCreated() 当前fragment所属的activity创建成功</li><li>onStart() fragment能被用户看到时调用</li><li>onResume() fragment能够接受用户事件</li><li>onPause() 失去用户焦点</li><li>onStop() fragment完全被遮挡</li><li>onDestroyView() activity中的fragment被移除</li><li>onDestroy() fragment被销毁</li><li>onDetach() activity和fragment失去关联时回调的方法</li></ol></blockquote><h2 id="（三）生命周期流程"><a href="#（三）生命周期流程" class="headerlink" title="（三）生命周期流程"></a>（三）生命周期流程</h2><h3 id="1-第一次打开"><a href="#1-第一次打开" class="headerlink" title="1. 第一次打开"></a>1. 第一次打开</h3><p>Activity  onCreate()</p><p>Fragment onAttach()  onCreate()  onCreateView() onActivityCreated()</p><p>Activity  onStart()</p><p>Fragment  onStart()</p><p>Activity  onResume()</p><p>Fragment  onResume()</p><h3 id="2-屏幕熄灭"><a href="#2-屏幕熄灭" class="headerlink" title="2. 屏幕熄灭"></a>2. 屏幕熄灭</h3><p>Fragment  onPause()</p><p>Activity  onPause()</p><p>Fragment  onStop()</p><p>Activity  onStop()</p><h3 id="3-fragment切换消失"><a href="#3-fragment切换消失" class="headerlink" title="3. fragment切换消失"></a>3. fragment切换消失</h3><p>Fragment1 onPause() onStop() onDestroyView() onDestroy() onDetach()</p><h3 id="4-fragment切换重现"><a href="#4-fragment切换重现" class="headerlink" title="4. fragment切换重现"></a>4. fragment切换重现</h3><p>Fragment1 onAttach()  onCreate()  onCreateView() onActivityCreated() onStart() onResume()</p><h3 id="5-后台打开"><a href="#5-后台打开" class="headerlink" title="5. 后台打开"></a>5. 后台打开</h3><p>Activity onRestart() onStart()</p><p>Fragment onStart()</p><p>Activity onResume()</p><p>Fragment onStart()</p><h3 id="6-关闭"><a href="#6-关闭" class="headerlink" title="6. 关闭"></a>6. 关闭</h3><p>Fragment onPause()</p><p>Activity onPause()</p><p>Fragment onStop()</p><p>Activity onStop()</p><p>Fragment onDestroyView() onDestroy() onDetach()</p><p>Activity onDestroy()</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一般手机开发，用到fragment的情况很多，主要有以下两种用法&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;平板与手机的运用&lt;/li&gt;
&lt;li&gt;抽出相应模块复用&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;一、Fragment的使用&quot;&gt;&lt;a 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>mkdir()与mkdirs()的区别</title>
    <link href="http://yoursite.com/2017/09/28/mkdir()%E4%B8%8Emkdirs()%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2017/09/28/mkdir()与mkdirs()的区别/</id>
    <published>2017-09-28T07:28:03.000Z</published>
    <updated>2017-09-28T07:39:58.987Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>用了file.mkdir()为何还是不能创建文件？</p><h1 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h1><p> boolean mkdir() :  创建此抽象路径名指定的目录。<br> boolean mkdirs() :  创建此抽象路径名指定的目录，包括创建必需但不存在的父目录。 </p><a id="more"></a><h1 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">File file = new Flie(&quot;d:/aaa&quot;);</div><div class="line">file.mkdir();</div></pre></td></tr></table></figure><p>能创建成功目录，会在d盘下创建名为aaa的目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">File file = new Flie(&quot;d:/bbb/ccc&quot;);</div><div class="line">file.mkdir();</div></pre></td></tr></table></figure><p>不能创建成功，因为d盘下没有名为bbb的目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">File file = new Flie(&quot;d:/bbb/ccc&quot;);</div><div class="line">file.mkdirs();</div></pre></td></tr></table></figure><p>可以创建成功，会在d盘下创建名为bbb的目录，然后在bbb下创建名为ccc的目录。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;用了file.mkdir()为何还是不能创建文件？&lt;/p&gt;
&lt;h1 id=&quot;比较&quot;&gt;&lt;a href=&quot;#比较&quot; class=&quot;headerlink&quot; title=&quot;比较&quot;&gt;&lt;/a&gt;比较&lt;/h1&gt;&lt;p&gt; boolean mkdir() :  创建此抽象路径名指定的目录。&lt;br&gt; boolean mkdirs() :  创建此抽象路径名指定的目录，包括创建必需但不存在的父目录。 &lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
